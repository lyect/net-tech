// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snakes.proto

#include "snakes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameAnnouncement_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameConfig_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_AckMsg_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameMessage_AnnouncementMsg_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_DiscoverMsg_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_ErrorMsg_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_JoinMsg_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_PingMsg_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_RoleChangeMsg_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameMessage_StateMsg_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_SteerMsg_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlayer_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GamePlayers_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GameState_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_Coord_snakes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snakes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameState_Snake_snakes_2eproto;
namespace snakes {
class GamePlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePlayer> _instance;
} _GamePlayer_default_instance_;
class GameConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameConfig> _instance;
} _GameConfig_default_instance_;
class GamePlayersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePlayers> _instance;
} _GamePlayers_default_instance_;
class GameState_CoordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameState_Coord> _instance;
} _GameState_Coord_default_instance_;
class GameState_SnakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameState_Snake> _instance;
} _GameState_Snake_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameState> _instance;
} _GameState_default_instance_;
class GameAnnouncementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameAnnouncement> _instance;
} _GameAnnouncement_default_instance_;
class GameMessage_PingMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage_PingMsg> _instance;
} _GameMessage_PingMsg_default_instance_;
class GameMessage_SteerMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage_SteerMsg> _instance;
} _GameMessage_SteerMsg_default_instance_;
class GameMessage_AckMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage_AckMsg> _instance;
} _GameMessage_AckMsg_default_instance_;
class GameMessage_StateMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage_StateMsg> _instance;
} _GameMessage_StateMsg_default_instance_;
class GameMessage_AnnouncementMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage_AnnouncementMsg> _instance;
} _GameMessage_AnnouncementMsg_default_instance_;
class GameMessage_DiscoverMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage_DiscoverMsg> _instance;
} _GameMessage_DiscoverMsg_default_instance_;
class GameMessage_JoinMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage_JoinMsg> _instance;
} _GameMessage_JoinMsg_default_instance_;
class GameMessage_ErrorMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage_ErrorMsg> _instance;
} _GameMessage_ErrorMsg_default_instance_;
class GameMessage_RoleChangeMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage_RoleChangeMsg> _instance;
} _GameMessage_RoleChangeMsg_default_instance_;
class GameMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameMessage> _instance;
  const ::snakes::GameMessage_PingMsg* ping_;
  const ::snakes::GameMessage_SteerMsg* steer_;
  const ::snakes::GameMessage_AckMsg* ack_;
  const ::snakes::GameMessage_StateMsg* state_;
  const ::snakes::GameMessage_AnnouncementMsg* announcement_;
  const ::snakes::GameMessage_JoinMsg* join_;
  const ::snakes::GameMessage_ErrorMsg* error_;
  const ::snakes::GameMessage_RoleChangeMsg* role_change_;
  const ::snakes::GameMessage_DiscoverMsg* discover_;
} _GameMessage_default_instance_;
}  // namespace snakes
static void InitDefaultsscc_info_GameAnnouncement_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameAnnouncement_default_instance_;
    new (ptr) ::snakes::GameAnnouncement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameAnnouncement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameAnnouncement_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameAnnouncement_snakes_2eproto}, {
      &scc_info_GamePlayers_snakes_2eproto.base,
      &scc_info_GameConfig_snakes_2eproto.base,}};

static void InitDefaultsscc_info_GameConfig_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameConfig_default_instance_;
    new (ptr) ::snakes::GameConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameConfig_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameConfig_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GameMessage_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_default_instance_;
    new (ptr) ::snakes::GameMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_GameMessage_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_GameMessage_snakes_2eproto}, {
      &scc_info_GameMessage_PingMsg_snakes_2eproto.base,
      &scc_info_GameMessage_SteerMsg_snakes_2eproto.base,
      &scc_info_GameMessage_AckMsg_snakes_2eproto.base,
      &scc_info_GameMessage_StateMsg_snakes_2eproto.base,
      &scc_info_GameMessage_AnnouncementMsg_snakes_2eproto.base,
      &scc_info_GameMessage_JoinMsg_snakes_2eproto.base,
      &scc_info_GameMessage_ErrorMsg_snakes_2eproto.base,
      &scc_info_GameMessage_RoleChangeMsg_snakes_2eproto.base,
      &scc_info_GameMessage_DiscoverMsg_snakes_2eproto.base,}};

static void InitDefaultsscc_info_GameMessage_AckMsg_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_AckMsg_default_instance_;
    new (ptr) ::snakes::GameMessage_AckMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage_AckMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_AckMsg_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameMessage_AckMsg_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GameMessage_AnnouncementMsg_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_AnnouncementMsg_default_instance_;
    new (ptr) ::snakes::GameMessage_AnnouncementMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage_AnnouncementMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameMessage_AnnouncementMsg_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameMessage_AnnouncementMsg_snakes_2eproto}, {
      &scc_info_GameAnnouncement_snakes_2eproto.base,}};

static void InitDefaultsscc_info_GameMessage_DiscoverMsg_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_DiscoverMsg_default_instance_;
    new (ptr) ::snakes::GameMessage_DiscoverMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage_DiscoverMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_DiscoverMsg_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameMessage_DiscoverMsg_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GameMessage_ErrorMsg_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_ErrorMsg_default_instance_;
    new (ptr) ::snakes::GameMessage_ErrorMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage_ErrorMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_ErrorMsg_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameMessage_ErrorMsg_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GameMessage_JoinMsg_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_JoinMsg_default_instance_;
    new (ptr) ::snakes::GameMessage_JoinMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage_JoinMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_JoinMsg_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameMessage_JoinMsg_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GameMessage_PingMsg_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_PingMsg_default_instance_;
    new (ptr) ::snakes::GameMessage_PingMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage_PingMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_PingMsg_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameMessage_PingMsg_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GameMessage_RoleChangeMsg_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_RoleChangeMsg_default_instance_;
    new (ptr) ::snakes::GameMessage_RoleChangeMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage_RoleChangeMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_RoleChangeMsg_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameMessage_RoleChangeMsg_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GameMessage_StateMsg_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_StateMsg_default_instance_;
    new (ptr) ::snakes::GameMessage_StateMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage_StateMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameMessage_StateMsg_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameMessage_StateMsg_snakes_2eproto}, {
      &scc_info_GameState_snakes_2eproto.base,}};

static void InitDefaultsscc_info_GameMessage_SteerMsg_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameMessage_SteerMsg_default_instance_;
    new (ptr) ::snakes::GameMessage_SteerMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameMessage_SteerMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameMessage_SteerMsg_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameMessage_SteerMsg_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GamePlayer_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GamePlayer_default_instance_;
    new (ptr) ::snakes::GamePlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GamePlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePlayer_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GamePlayer_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GamePlayers_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GamePlayers_default_instance_;
    new (ptr) ::snakes::GamePlayers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GamePlayers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GamePlayers_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GamePlayers_snakes_2eproto}, {
      &scc_info_GamePlayer_snakes_2eproto.base,}};

static void InitDefaultsscc_info_GameState_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameState_default_instance_;
    new (ptr) ::snakes::GameState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GameState_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GameState_snakes_2eproto}, {
      &scc_info_GameState_Snake_snakes_2eproto.base,
      &scc_info_GameState_Coord_snakes_2eproto.base,
      &scc_info_GamePlayers_snakes_2eproto.base,}};

static void InitDefaultsscc_info_GameState_Coord_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameState_Coord_default_instance_;
    new (ptr) ::snakes::GameState_Coord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameState_Coord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameState_Coord_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameState_Coord_snakes_2eproto}, {}};

static void InitDefaultsscc_info_GameState_Snake_snakes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snakes::_GameState_Snake_default_instance_;
    new (ptr) ::snakes::GameState_Snake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snakes::GameState_Snake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameState_Snake_snakes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameState_Snake_snakes_2eproto}, {
      &scc_info_GameState_Coord_snakes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_snakes_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_snakes_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_snakes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_snakes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayer, name_),
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayer, id_),
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayer, ip_address_),
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayer, port_),
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayer, role_),
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayer, type_),
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayer, score_),
  0,
  2,
  1,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::snakes::GameConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameConfig, width_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameConfig, height_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameConfig, food_static_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameConfig, state_delay_ms_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GamePlayers, players_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Coord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Coord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Coord, x_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Coord, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Snake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Snake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Snake, player_id_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Snake, points_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Snake, state_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState_Snake, head_direction_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::snakes::GameState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameState, state_order_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState, snakes_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState, foods_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameState, players_),
  1,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::snakes::GameAnnouncement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameAnnouncement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameAnnouncement, players_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameAnnouncement, config_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameAnnouncement, can_join_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameAnnouncement, game_name_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_PingMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_SteerMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_SteerMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_SteerMsg, direction_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_AckMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_StateMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_StateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_StateMsg, state_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_AnnouncementMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_AnnouncementMsg, games_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_DiscoverMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_JoinMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_JoinMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_JoinMsg, player_type_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_JoinMsg, player_name_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_JoinMsg, game_name_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_JoinMsg, requested_role_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_ErrorMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_ErrorMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_ErrorMsg, error_message_),
  0,
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_RoleChangeMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_RoleChangeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_RoleChangeMsg, sender_role_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage_RoleChangeMsg, receiver_role_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage, msg_seq_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage, sender_id_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage, receiver_id_),
  offsetof(::snakes::GameMessageDefaultTypeInternal, ping_),
  offsetof(::snakes::GameMessageDefaultTypeInternal, steer_),
  offsetof(::snakes::GameMessageDefaultTypeInternal, ack_),
  offsetof(::snakes::GameMessageDefaultTypeInternal, state_),
  offsetof(::snakes::GameMessageDefaultTypeInternal, announcement_),
  offsetof(::snakes::GameMessageDefaultTypeInternal, join_),
  offsetof(::snakes::GameMessageDefaultTypeInternal, error_),
  offsetof(::snakes::GameMessageDefaultTypeInternal, role_change_),
  offsetof(::snakes::GameMessageDefaultTypeInternal, discover_),
  PROTOBUF_FIELD_OFFSET(::snakes::GameMessage, Type_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::snakes::GamePlayer)},
  { 19, 28, sizeof(::snakes::GameConfig)},
  { 32, -1, sizeof(::snakes::GamePlayers)},
  { 38, 45, sizeof(::snakes::GameState_Coord)},
  { 47, 56, sizeof(::snakes::GameState_Snake)},
  { 60, 69, sizeof(::snakes::GameState)},
  { 73, 82, sizeof(::snakes::GameAnnouncement)},
  { 86, -1, sizeof(::snakes::GameMessage_PingMsg)},
  { 91, 97, sizeof(::snakes::GameMessage_SteerMsg)},
  { 98, -1, sizeof(::snakes::GameMessage_AckMsg)},
  { 103, 109, sizeof(::snakes::GameMessage_StateMsg)},
  { 110, -1, sizeof(::snakes::GameMessage_AnnouncementMsg)},
  { 116, -1, sizeof(::snakes::GameMessage_DiscoverMsg)},
  { 121, 130, sizeof(::snakes::GameMessage_JoinMsg)},
  { 134, 140, sizeof(::snakes::GameMessage_ErrorMsg)},
  { 141, 148, sizeof(::snakes::GameMessage_RoleChangeMsg)},
  { 150, 168, sizeof(::snakes::GameMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GamePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GamePlayers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameState_Coord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameState_Snake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameAnnouncement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_PingMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_SteerMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_AckMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_StateMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_AnnouncementMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_DiscoverMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_JoinMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_ErrorMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_RoleChangeMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snakes::_GameMessage_default_instance_),
};

const char descriptor_table_protodef_snakes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014snakes.proto\022\006snakes\"\240\001\n\nGamePlayer\022\014\n"
  "\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\022\n\nip_address\030\003 "
  "\001(\t\022\014\n\004port\030\004 \001(\005\022\036\n\004role\030\005 \002(\0162\020.snakes"
  ".NodeRole\022\'\n\004type\030\006 \001(\0162\022.snakes.PlayerT"
  "ype:\005HUMAN\022\r\n\005score\030\007 \002(\005\"i\n\nGameConfig\022"
  "\021\n\005width\030\001 \001(\005:\00240\022\022\n\006height\030\002 \001(\005:\00230\022\026"
  "\n\013food_static\030\003 \001(\005:\0011\022\034\n\016state_delay_ms"
  "\030\005 \001(\005:\0041000\"2\n\013GamePlayers\022#\n\007players\030\001"
  " \003(\0132\022.snakes.GamePlayer\"\214\003\n\tGameState\022\023"
  "\n\013state_order\030\001 \002(\005\022\'\n\006snakes\030\002 \003(\0132\027.sn"
  "akes.GameState.Snake\022&\n\005foods\030\003 \003(\0132\027.sn"
  "akes.GameState.Coord\022$\n\007players\030\004 \002(\0132\023."
  "snakes.GamePlayers\032#\n\005Coord\022\014\n\001x\030\001 \001(\021:\001"
  "0\022\014\n\001y\030\002 \001(\021:\0010\032\315\001\n\005Snake\022\021\n\tplayer_id\030\001"
  " \002(\005\022\'\n\006points\030\002 \003(\0132\027.snakes.GameState."
  "Coord\0228\n\005state\030\003 \002(\0162\".snakes.GameState."
  "Snake.SnakeState:\005ALIVE\022)\n\016head_directio"
  "n\030\004 \002(\0162\021.snakes.Direction\"#\n\nSnakeState"
  "\022\t\n\005ALIVE\020\000\022\n\n\006ZOMBIE\020\001\"\207\001\n\020GameAnnounce"
  "ment\022$\n\007players\030\001 \002(\0132\023.snakes.GamePlaye"
  "rs\022\"\n\006config\030\002 \002(\0132\022.snakes.GameConfig\022\026"
  "\n\010can_join\030\003 \001(\010:\004true\022\021\n\tgame_name\030\004 \002("
  "\t\"\336\007\n\013GameMessage\022\017\n\007msg_seq\030\001 \002(\003\022\021\n\tse"
  "nder_id\030\n \001(\005\022\023\n\013receiver_id\030\013 \001(\005\022+\n\004pi"
  "ng\030\002 \001(\0132\033.snakes.GameMessage.PingMsgH\000\022"
  "-\n\005steer\030\003 \001(\0132\034.snakes.GameMessage.Stee"
  "rMsgH\000\022)\n\003ack\030\004 \001(\0132\032.snakes.GameMessage"
  ".AckMsgH\000\022-\n\005state\030\005 \001(\0132\034.snakes.GameMe"
  "ssage.StateMsgH\000\022;\n\014announcement\030\006 \001(\0132#"
  ".snakes.GameMessage.AnnouncementMsgH\000\022+\n"
  "\004join\030\007 \001(\0132\033.snakes.GameMessage.JoinMsg"
  "H\000\022-\n\005error\030\010 \001(\0132\034.snakes.GameMessage.E"
  "rrorMsgH\000\0228\n\013role_change\030\t \001(\0132!.snakes."
  "GameMessage.RoleChangeMsgH\000\0223\n\010discover\030"
  "\014 \001(\0132\037.snakes.GameMessage.DiscoverMsgH\000"
  "\032\t\n\007PingMsg\0320\n\010SteerMsg\022$\n\tdirection\030\001 \002"
  "(\0162\021.snakes.Direction\032\010\n\006AckMsg\032,\n\010State"
  "Msg\022 \n\005state\030\001 \002(\0132\021.snakes.GameState\032:\n"
  "\017AnnouncementMsg\022\'\n\005games\030\001 \003(\0132\030.snakes"
  ".GameAnnouncement\032\r\n\013DiscoverMsg\032\213\001\n\007Joi"
  "nMsg\022.\n\013player_type\030\001 \001(\0162\022.snakes.Playe"
  "rType:\005HUMAN\022\023\n\013player_name\030\003 \002(\t\022\021\n\tgam"
  "e_name\030\004 \002(\t\022(\n\016requested_role\030\005 \002(\0162\020.s"
  "nakes.NodeRole\032!\n\010ErrorMsg\022\025\n\rerror_mess"
  "age\030\001 \002(\t\032_\n\rRoleChangeMsg\022%\n\013sender_rol"
  "e\030\001 \001(\0162\020.snakes.NodeRole\022\'\n\rreceiver_ro"
  "le\030\002 \001(\0162\020.snakes.NodeRoleB\006\n\004Type*:\n\010No"
  "deRole\022\n\n\006NORMAL\020\000\022\n\n\006MASTER\020\001\022\n\n\006DEPUTY"
  "\020\002\022\n\n\006VIEWER\020\003*\"\n\nPlayerType\022\t\n\005HUMAN\020\000\022"
  "\t\n\005ROBOT\020\001*2\n\tDirection\022\006\n\002UP\020\001\022\010\n\004DOWN\020"
  "\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_snakes_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_snakes_2eproto_sccs[17] = {
  &scc_info_GameAnnouncement_snakes_2eproto.base,
  &scc_info_GameConfig_snakes_2eproto.base,
  &scc_info_GameMessage_snakes_2eproto.base,
  &scc_info_GameMessage_AckMsg_snakes_2eproto.base,
  &scc_info_GameMessage_AnnouncementMsg_snakes_2eproto.base,
  &scc_info_GameMessage_DiscoverMsg_snakes_2eproto.base,
  &scc_info_GameMessage_ErrorMsg_snakes_2eproto.base,
  &scc_info_GameMessage_JoinMsg_snakes_2eproto.base,
  &scc_info_GameMessage_PingMsg_snakes_2eproto.base,
  &scc_info_GameMessage_RoleChangeMsg_snakes_2eproto.base,
  &scc_info_GameMessage_StateMsg_snakes_2eproto.base,
  &scc_info_GameMessage_SteerMsg_snakes_2eproto.base,
  &scc_info_GamePlayer_snakes_2eproto.base,
  &scc_info_GamePlayers_snakes_2eproto.base,
  &scc_info_GameState_snakes_2eproto.base,
  &scc_info_GameState_Coord_snakes_2eproto.base,
  &scc_info_GameState_Snake_snakes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_snakes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snakes_2eproto = {
  false, false, descriptor_table_protodef_snakes_2eproto, "snakes.proto", 2022,
  &descriptor_table_snakes_2eproto_once, descriptor_table_snakes_2eproto_sccs, descriptor_table_snakes_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_snakes_2eproto::offsets,
  file_level_metadata_snakes_2eproto, 17, file_level_enum_descriptors_snakes_2eproto, file_level_service_descriptors_snakes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_snakes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_snakes_2eproto)), true);
namespace snakes {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_Snake_SnakeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snakes_2eproto);
  return file_level_enum_descriptors_snakes_2eproto[0];
}
bool GameState_Snake_SnakeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameState_Snake_SnakeState GameState_Snake::ALIVE;
constexpr GameState_Snake_SnakeState GameState_Snake::ZOMBIE;
constexpr GameState_Snake_SnakeState GameState_Snake::SnakeState_MIN;
constexpr GameState_Snake_SnakeState GameState_Snake::SnakeState_MAX;
constexpr int GameState_Snake::SnakeState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeRole_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snakes_2eproto);
  return file_level_enum_descriptors_snakes_2eproto[1];
}
bool NodeRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snakes_2eproto);
  return file_level_enum_descriptors_snakes_2eproto[2];
}
bool PlayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snakes_2eproto);
  return file_level_enum_descriptors_snakes_2eproto[3];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GamePlayer::InitAsDefaultInstance() {
}
class GamePlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<GamePlayer>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000055) ^ 0x00000055) != 0;
  }
};

GamePlayer::GamePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GamePlayer)
}
GamePlayer::GamePlayer(const GamePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip_address()) {
    ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip_address(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:snakes.GamePlayer)
}

void GamePlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GamePlayer_snakes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&id_)) + sizeof(score_));
}

GamePlayer::~GamePlayer() {
  // @@protoc_insertion_point(destructor:snakes.GamePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GamePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GamePlayer::ArenaDtor(void* object) {
  GamePlayer* _this = reinterpret_cast< GamePlayer* >(object);
  (void)_this;
}
void GamePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePlayer& GamePlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePlayer_snakes_2eproto.base);
  return *internal_default_instance();
}


void GamePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GamePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&id_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snakes.GamePlayer.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snakes.GamePlayer.ip_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .snakes.NodeRole role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::snakes::NodeRole_IsValid(val))) {
            _internal_set_role(static_cast<::snakes::NodeRole>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .snakes.PlayerType type = 6 [default = HUMAN];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::snakes::PlayerType_IsValid(val))) {
            _internal_set_type(static_cast<::snakes::PlayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GamePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "snakes.GamePlayer.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional string ip_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "snakes.GamePlayer.ip_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_address(), target);
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  // required .snakes.NodeRole role = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_role(), target);
  }

  // optional .snakes.PlayerType type = 6 [default = HUMAN];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // required int32 score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GamePlayer)
  return target;
}

size_t GamePlayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snakes.GamePlayer)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_role()) {
    // required .snakes.NodeRole role = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());
  }

  if (_internal_has_score()) {
    // required int32 score = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  return total_size;
}
size_t GamePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GamePlayer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000055) ^ 0x00000055) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required .snakes.NodeRole role = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());

    // required int32 score = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string ip_address = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // optional int32 port = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // optional .snakes.PlayerType type = 6 [default = HUMAN];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GamePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GamePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GamePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GamePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GamePlayer)
    MergeFrom(*source);
  }
}

void GamePlayer::MergeFrom(const GamePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GamePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip_address(from._internal_ip_address());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GamePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GamePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayer::CopyFrom(const GamePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GamePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GamePlayer::InternalSwap(GamePlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_address_.Swap(&other->ip_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GamePlayer, score_)
      + sizeof(GamePlayer::score_)
      - PROTOBUF_FIELD_OFFSET(GamePlayer, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameConfig::InitAsDefaultInstance() {
}
class GameConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<GameConfig>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_food_static(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GameConfig::GameConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameConfig)
}
GameConfig::GameConfig(const GameConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_delay_ms_) -
    reinterpret_cast<char*>(&width_)) + sizeof(state_delay_ms_));
  // @@protoc_insertion_point(copy_constructor:snakes.GameConfig)
}

void GameConfig::SharedCtor() {
  width_ = 40;
  height_ = 30;
  food_static_ = 1;
  state_delay_ms_ = 1000;
}

GameConfig::~GameConfig() {
  // @@protoc_insertion_point(destructor:snakes.GameConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameConfig::ArenaDtor(void* object) {
  GameConfig* _this = reinterpret_cast< GameConfig* >(object);
  (void)_this;
}
void GameConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameConfig& GameConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameConfig_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    width_ = 40;
    height_ = 30;
    food_static_ = 1;
    state_delay_ms_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 width = 1 [default = 40];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2 [default = 30];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 food_static = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_food_static(&has_bits);
          food_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 state_delay_ms = 5 [default = 1000];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_state_delay_ms(&has_bits);
          state_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1 [default = 40];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 height = 2 [default = 30];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // optional int32 food_static = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_food_static(), target);
  }

  // optional int32 state_delay_ms = 5 [default = 1000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_state_delay_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameConfig)
  return target;
}

size_t GameConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 width = 1 [default = 40];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_width());
    }

    // optional int32 height = 2 [default = 30];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_height());
    }

    // optional int32 food_static = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_food_static());
    }

    // optional int32 state_delay_ms = 5 [default = 1000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_state_delay_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GameConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameConfig)
    MergeFrom(*source);
  }
}

void GameConfig::MergeFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      food_static_ = from.food_static_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_delay_ms_ = from.state_delay_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConfig::CopyFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConfig::IsInitialized() const {
  return true;
}

void GameConfig::InternalSwap(GameConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(food_static_, other->food_static_);
  swap(state_delay_ms_, other->state_delay_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GamePlayers::InitAsDefaultInstance() {
}
class GamePlayers::_Internal {
 public:
};

GamePlayers::GamePlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GamePlayers)
}
GamePlayers::GamePlayers(const GamePlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snakes.GamePlayers)
}

void GamePlayers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GamePlayers_snakes_2eproto.base);
}

GamePlayers::~GamePlayers() {
  // @@protoc_insertion_point(destructor:snakes.GamePlayers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GamePlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GamePlayers::ArenaDtor(void* object) {
  GamePlayers* _this = reinterpret_cast< GamePlayers* >(object);
  (void)_this;
}
void GamePlayers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePlayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePlayers& GamePlayers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePlayers_snakes_2eproto.base);
  return *internal_default_instance();
}


void GamePlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GamePlayers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePlayers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .snakes.GamePlayer players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePlayers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GamePlayers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .snakes.GamePlayer players = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GamePlayers)
  return target;
}

size_t GamePlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GamePlayers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snakes.GamePlayer players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePlayers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GamePlayers)
  GOOGLE_DCHECK_NE(&from, this);
  const GamePlayers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GamePlayers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GamePlayers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GamePlayers)
    MergeFrom(*source);
  }
}

void GamePlayers::MergeFrom(const GamePlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GamePlayers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
}

void GamePlayers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GamePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayers::CopyFrom(const GamePlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GamePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayers::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(players_)) return false;
  return true;
}

void GamePlayers::InternalSwap(GamePlayers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePlayers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameState_Coord::InitAsDefaultInstance() {
}
class GameState_Coord::_Internal {
 public:
  using HasBits = decltype(std::declval<GameState_Coord>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GameState_Coord::GameState_Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameState.Coord)
}
GameState_Coord::GameState_Coord(const GameState_Coord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:snakes.GameState.Coord)
}

void GameState_Coord::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

GameState_Coord::~GameState_Coord() {
  // @@protoc_insertion_point(destructor:snakes.GameState.Coord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameState_Coord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameState_Coord::ArenaDtor(void* object) {
  GameState_Coord* _this = reinterpret_cast< GameState_Coord* >(object);
  (void)_this;
}
void GameState_Coord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameState_Coord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameState_Coord& GameState_Coord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameState_Coord_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameState_Coord::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameState.Coord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState_Coord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional sint32 x = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 y = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState_Coord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameState.Coord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_x(), target);
  }

  // optional sint32 y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameState.Coord)
  return target;
}

size_t GameState_Coord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameState.Coord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional sint32 x = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_x());
    }

    // optional sint32 y = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState_Coord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameState.Coord)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState_Coord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameState_Coord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameState.Coord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameState.Coord)
    MergeFrom(*source);
  }
}

void GameState_Coord::MergeFrom(const GameState_Coord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameState.Coord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameState_Coord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameState.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState_Coord::CopyFrom(const GameState_Coord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameState.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState_Coord::IsInitialized() const {
  return true;
}

void GameState_Coord::InternalSwap(GameState_Coord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState_Coord, y_)
      + sizeof(GameState_Coord::y_)
      - PROTOBUF_FIELD_OFFSET(GameState_Coord, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState_Coord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameState_Snake::InitAsDefaultInstance() {
}
class GameState_Snake::_Internal {
 public:
  using HasBits = decltype(std::declval<GameState_Snake>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_head_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

GameState_Snake::GameState_Snake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameState.Snake)
}
GameState_Snake::GameState_Snake(const GameState_Snake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_direction_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(head_direction_));
  // @@protoc_insertion_point(copy_constructor:snakes.GameState.Snake)
}

void GameState_Snake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameState_Snake_snakes_2eproto.base);
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(state_));
  head_direction_ = 1;
}

GameState_Snake::~GameState_Snake() {
  // @@protoc_insertion_point(destructor:snakes.GameState.Snake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameState_Snake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameState_Snake::ArenaDtor(void* object) {
  GameState_Snake* _this = reinterpret_cast< GameState_Snake* >(object);
  (void)_this;
}
void GameState_Snake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameState_Snake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameState_Snake& GameState_Snake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameState_Snake_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameState_Snake::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameState.Snake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(state_));
    head_direction_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState_Snake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .snakes.GameState.Coord points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::snakes::GameState_Snake_SnakeState_IsValid(val))) {
            _internal_set_state(static_cast<::snakes::GameState_Snake_SnakeState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .snakes.Direction head_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::snakes::Direction_IsValid(val))) {
            _internal_set_head_direction(static_cast<::snakes::Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState_Snake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameState.Snake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // repeated .snakes.GameState.Coord points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_points(i), target, stream);
  }

  // required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // required .snakes.Direction head_direction = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_head_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameState.Snake)
  return target;
}

size_t GameState_Snake::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snakes.GameState.Snake)
  size_t total_size = 0;

  if (_internal_has_player_id()) {
    // required int32 player_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (_internal_has_state()) {
    // required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (_internal_has_head_direction()) {
    // required .snakes.Direction head_direction = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_head_direction());
  }

  return total_size;
}
size_t GameState_Snake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameState.Snake)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 player_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());

    // required .snakes.GameState.Snake.SnakeState state = 3 [default = ALIVE];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());

    // required .snakes.Direction head_direction = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_head_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snakes.GameState.Coord points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState_Snake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameState.Snake)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState_Snake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameState_Snake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameState.Snake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameState.Snake)
    MergeFrom(*source);
  }
}

void GameState_Snake::MergeFrom(const GameState_Snake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameState.Snake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      head_direction_ = from.head_direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameState_Snake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameState.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState_Snake::CopyFrom(const GameState_Snake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameState.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState_Snake::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameState_Snake::InternalSwap(GameState_Snake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState_Snake, state_)
      + sizeof(GameState_Snake::state_)
      - PROTOBUF_FIELD_OFFSET(GameState_Snake, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
  swap(head_direction_, other->head_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState_Snake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameState::InitAsDefaultInstance() {
  ::snakes::_GameState_default_instance_._instance.get_mutable()->players_ = const_cast< ::snakes::GamePlayers*>(
      ::snakes::GamePlayers::internal_default_instance());
}
class GameState::_Internal {
 public:
  using HasBits = decltype(std::declval<GameState>()._has_bits_);
  static void set_has_state_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::snakes::GamePlayers& players(const GameState* msg);
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::snakes::GamePlayers&
GameState::_Internal::players(const GameState* msg) {
  return *msg->players_;
}
GameState::GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  snakes_(arena),
  foods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      snakes_(from.snakes_),
      foods_(from.foods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_players()) {
    players_ = new ::snakes::GamePlayers(*from.players_);
  } else {
    players_ = nullptr;
  }
  state_order_ = from.state_order_;
  // @@protoc_insertion_point(copy_constructor:snakes.GameState)
}

void GameState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameState_snakes_2eproto.base);
  ::memset(&players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_order_) -
      reinterpret_cast<char*>(&players_)) + sizeof(state_order_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:snakes.GameState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete players_;
}

void GameState::ArenaDtor(void* object) {
  GameState* _this = reinterpret_cast< GameState* >(object);
  (void)_this;
}
void GameState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameState& GameState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameState_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snakes_.Clear();
  foods_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(players_ != nullptr);
    players_->Clear();
  }
  state_order_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 state_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_state_order(&has_bits);
          state_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .snakes.GameState.Snake snakes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_snakes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .snakes.GameState.Coord foods = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_foods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required .snakes.GamePlayers players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_players(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 state_order = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state_order(), target);
  }

  // repeated .snakes.GameState.Snake snakes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_snakes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_snakes(i), target, stream);
  }

  // repeated .snakes.GameState.Coord foods = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_foods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_foods(i), target, stream);
  }

  // required .snakes.GamePlayers players = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::players(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameState)
  return target;
}

size_t GameState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snakes.GameState)
  size_t total_size = 0;

  if (_internal_has_players()) {
    // required .snakes.GamePlayers players = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *players_);
  }

  if (_internal_has_state_order()) {
    // required int32 state_order = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state_order());
  }

  return total_size;
}
size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .snakes.GamePlayers players = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *players_);

    // required int32 state_order = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state_order());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snakes.GameState.Snake snakes = 2;
  total_size += 1UL * this->_internal_snakes_size();
  for (const auto& msg : this->snakes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .snakes.GameState.Coord foods = 3;
  total_size += 1UL * this->_internal_foods_size();
  for (const auto& msg : this->foods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snakes_.MergeFrom(from.snakes_);
  foods_.MergeFrom(from.foods_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_players()->::snakes::GamePlayers::MergeFrom(from._internal_players());
    }
    if (cached_has_bits & 0x00000002u) {
      state_order_ = from.state_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(snakes_)) return false;
  if (_internal_has_players()) {
    if (!players_->IsInitialized()) return false;
  }
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snakes_.InternalSwap(&other->snakes_);
  foods_.InternalSwap(&other->foods_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState, state_order_)
      + sizeof(GameState::state_order_)
      - PROTOBUF_FIELD_OFFSET(GameState, players_)>(
          reinterpret_cast<char*>(&players_),
          reinterpret_cast<char*>(&other->players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameAnnouncement::InitAsDefaultInstance() {
  ::snakes::_GameAnnouncement_default_instance_._instance.get_mutable()->players_ = const_cast< ::snakes::GamePlayers*>(
      ::snakes::GamePlayers::internal_default_instance());
  ::snakes::_GameAnnouncement_default_instance_._instance.get_mutable()->config_ = const_cast< ::snakes::GameConfig*>(
      ::snakes::GameConfig::internal_default_instance());
}
class GameAnnouncement::_Internal {
 public:
  using HasBits = decltype(std::declval<GameAnnouncement>()._has_bits_);
  static const ::snakes::GamePlayers& players(const GameAnnouncement* msg);
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::snakes::GameConfig& config(const GameAnnouncement* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_join(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::snakes::GamePlayers&
GameAnnouncement::_Internal::players(const GameAnnouncement* msg) {
  return *msg->players_;
}
const ::snakes::GameConfig&
GameAnnouncement::_Internal::config(const GameAnnouncement* msg) {
  return *msg->config_;
}
GameAnnouncement::GameAnnouncement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameAnnouncement)
}
GameAnnouncement::GameAnnouncement(const GameAnnouncement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_name()) {
    game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_name(),
      GetArena());
  }
  if (from._internal_has_players()) {
    players_ = new ::snakes::GamePlayers(*from.players_);
  } else {
    players_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::snakes::GameConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  can_join_ = from.can_join_;
  // @@protoc_insertion_point(copy_constructor:snakes.GameAnnouncement)
}

void GameAnnouncement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameAnnouncement_snakes_2eproto.base);
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&players_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&players_)) + sizeof(config_));
  can_join_ = true;
}

GameAnnouncement::~GameAnnouncement() {
  // @@protoc_insertion_point(destructor:snakes.GameAnnouncement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameAnnouncement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete players_;
  if (this != internal_default_instance()) delete config_;
}

void GameAnnouncement::ArenaDtor(void* object) {
  GameAnnouncement* _this = reinterpret_cast< GameAnnouncement* >(object);
  (void)_this;
}
void GameAnnouncement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameAnnouncement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameAnnouncement& GameAnnouncement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameAnnouncement_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameAnnouncement::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameAnnouncement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(players_ != nullptr);
      players_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
    can_join_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameAnnouncement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .snakes.GamePlayers players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_players(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .snakes.GameConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_join = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_join(&has_bits);
          can_join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string game_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snakes.GameAnnouncement.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameAnnouncement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameAnnouncement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .snakes.GamePlayers players = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::players(this), target, stream);
  }

  // required .snakes.GameConfig config = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  // optional bool can_join = 3 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_can_join(), target);
  }

  // required string game_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "snakes.GameAnnouncement.game_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_game_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameAnnouncement)
  return target;
}

size_t GameAnnouncement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snakes.GameAnnouncement)
  size_t total_size = 0;

  if (_internal_has_game_name()) {
    // required string game_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_name());
  }

  if (_internal_has_players()) {
    // required .snakes.GamePlayers players = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *players_);
  }

  if (_internal_has_config()) {
    // required .snakes.GameConfig config = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  return total_size;
}
size_t GameAnnouncement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameAnnouncement)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string game_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_name());

    // required .snakes.GamePlayers players = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *players_);

    // required .snakes.GameConfig config = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool can_join = 3 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAnnouncement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameAnnouncement)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAnnouncement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameAnnouncement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameAnnouncement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameAnnouncement)
    MergeFrom(*source);
  }
}

void GameAnnouncement::MergeFrom(const GameAnnouncement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameAnnouncement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_players()->::snakes::GamePlayers::MergeFrom(from._internal_players());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_config()->::snakes::GameConfig::MergeFrom(from._internal_config());
    }
    if (cached_has_bits & 0x00000008u) {
      can_join_ = from.can_join_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameAnnouncement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameAnnouncement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAnnouncement::CopyFrom(const GameAnnouncement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameAnnouncement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAnnouncement::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_players()) {
    if (!players_->IsInitialized()) return false;
  }
  return true;
}

void GameAnnouncement::InternalSwap(GameAnnouncement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_name_.Swap(&other->game_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameAnnouncement, config_)
      + sizeof(GameAnnouncement::config_)
      - PROTOBUF_FIELD_OFFSET(GameAnnouncement, players_)>(
          reinterpret_cast<char*>(&players_),
          reinterpret_cast<char*>(&other->players_));
  swap(can_join_, other->can_join_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAnnouncement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage_PingMsg::InitAsDefaultInstance() {
}
class GameMessage_PingMsg::_Internal {
 public:
};

GameMessage_PingMsg::GameMessage_PingMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage.PingMsg)
}
GameMessage_PingMsg::GameMessage_PingMsg(const GameMessage_PingMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.PingMsg)
}

void GameMessage_PingMsg::SharedCtor() {
}

GameMessage_PingMsg::~GameMessage_PingMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.PingMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage_PingMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameMessage_PingMsg::ArenaDtor(void* object) {
  GameMessage_PingMsg* _this = reinterpret_cast< GameMessage_PingMsg* >(object);
  (void)_this;
}
void GameMessage_PingMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage_PingMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage_PingMsg& GameMessage_PingMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_PingMsg_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage_PingMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.PingMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage_PingMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage_PingMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.PingMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.PingMsg)
  return target;
}

size_t GameMessage_PingMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.PingMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage_PingMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.PingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage_PingMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage_PingMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.PingMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.PingMsg)
    MergeFrom(*source);
  }
}

void GameMessage_PingMsg::MergeFrom(const GameMessage_PingMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.PingMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameMessage_PingMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.PingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_PingMsg::CopyFrom(const GameMessage_PingMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.PingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_PingMsg::IsInitialized() const {
  return true;
}

void GameMessage_PingMsg::InternalSwap(GameMessage_PingMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage_PingMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage_SteerMsg::InitAsDefaultInstance() {
}
class GameMessage_SteerMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMessage_SteerMsg>()._has_bits_);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameMessage_SteerMsg::GameMessage_SteerMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage.SteerMsg)
}
GameMessage_SteerMsg::GameMessage_SteerMsg(const GameMessage_SteerMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.SteerMsg)
}

void GameMessage_SteerMsg::SharedCtor() {
  direction_ = 1;
}

GameMessage_SteerMsg::~GameMessage_SteerMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.SteerMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage_SteerMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameMessage_SteerMsg::ArenaDtor(void* object) {
  GameMessage_SteerMsg* _this = reinterpret_cast< GameMessage_SteerMsg* >(object);
  (void)_this;
}
void GameMessage_SteerMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage_SteerMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage_SteerMsg& GameMessage_SteerMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_SteerMsg_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage_SteerMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.SteerMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  direction_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage_SteerMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .snakes.Direction direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::snakes::Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::snakes::Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage_SteerMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.SteerMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .snakes.Direction direction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.SteerMsg)
  return target;
}

size_t GameMessage_SteerMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.SteerMsg)
  size_t total_size = 0;

  // required .snakes.Direction direction = 1;
  if (_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage_SteerMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.SteerMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage_SteerMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage_SteerMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.SteerMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.SteerMsg)
    MergeFrom(*source);
  }
}

void GameMessage_SteerMsg::MergeFrom(const GameMessage_SteerMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.SteerMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_direction()) {
    _internal_set_direction(from._internal_direction());
  }
}

void GameMessage_SteerMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.SteerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_SteerMsg::CopyFrom(const GameMessage_SteerMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.SteerMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_SteerMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameMessage_SteerMsg::InternalSwap(GameMessage_SteerMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage_SteerMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage_AckMsg::InitAsDefaultInstance() {
}
class GameMessage_AckMsg::_Internal {
 public:
};

GameMessage_AckMsg::GameMessage_AckMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage.AckMsg)
}
GameMessage_AckMsg::GameMessage_AckMsg(const GameMessage_AckMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.AckMsg)
}

void GameMessage_AckMsg::SharedCtor() {
}

GameMessage_AckMsg::~GameMessage_AckMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.AckMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage_AckMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameMessage_AckMsg::ArenaDtor(void* object) {
  GameMessage_AckMsg* _this = reinterpret_cast< GameMessage_AckMsg* >(object);
  (void)_this;
}
void GameMessage_AckMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage_AckMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage_AckMsg& GameMessage_AckMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_AckMsg_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage_AckMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.AckMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage_AckMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage_AckMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.AckMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.AckMsg)
  return target;
}

size_t GameMessage_AckMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.AckMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage_AckMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.AckMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage_AckMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage_AckMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.AckMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.AckMsg)
    MergeFrom(*source);
  }
}

void GameMessage_AckMsg::MergeFrom(const GameMessage_AckMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.AckMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameMessage_AckMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.AckMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_AckMsg::CopyFrom(const GameMessage_AckMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.AckMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_AckMsg::IsInitialized() const {
  return true;
}

void GameMessage_AckMsg::InternalSwap(GameMessage_AckMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage_AckMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage_StateMsg::InitAsDefaultInstance() {
  ::snakes::_GameMessage_StateMsg_default_instance_._instance.get_mutable()->state_ = const_cast< ::snakes::GameState*>(
      ::snakes::GameState::internal_default_instance());
}
class GameMessage_StateMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMessage_StateMsg>()._has_bits_);
  static const ::snakes::GameState& state(const GameMessage_StateMsg* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::snakes::GameState&
GameMessage_StateMsg::_Internal::state(const GameMessage_StateMsg* msg) {
  return *msg->state_;
}
GameMessage_StateMsg::GameMessage_StateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage.StateMsg)
}
GameMessage_StateMsg::GameMessage_StateMsg(const GameMessage_StateMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::snakes::GameState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.StateMsg)
}

void GameMessage_StateMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameMessage_StateMsg_snakes_2eproto.base);
  state_ = nullptr;
}

GameMessage_StateMsg::~GameMessage_StateMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.StateMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage_StateMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void GameMessage_StateMsg::ArenaDtor(void* object) {
  GameMessage_StateMsg* _this = reinterpret_cast< GameMessage_StateMsg* >(object);
  (void)_this;
}
void GameMessage_StateMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage_StateMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage_StateMsg& GameMessage_StateMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_StateMsg_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage_StateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.StateMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage_StateMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .snakes.GameState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage_StateMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.StateMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .snakes.GameState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.StateMsg)
  return target;
}

size_t GameMessage_StateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.StateMsg)
  size_t total_size = 0;

  // required .snakes.GameState state = 1;
  if (_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage_StateMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.StateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage_StateMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage_StateMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.StateMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.StateMsg)
    MergeFrom(*source);
  }
}

void GameMessage_StateMsg::MergeFrom(const GameMessage_StateMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.StateMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_mutable_state()->::snakes::GameState::MergeFrom(from._internal_state());
  }
}

void GameMessage_StateMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.StateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_StateMsg::CopyFrom(const GameMessage_StateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.StateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_StateMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_state()) {
    if (!state_->IsInitialized()) return false;
  }
  return true;
}

void GameMessage_StateMsg::InternalSwap(GameMessage_StateMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage_StateMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage_AnnouncementMsg::InitAsDefaultInstance() {
}
class GameMessage_AnnouncementMsg::_Internal {
 public:
};

GameMessage_AnnouncementMsg::GameMessage_AnnouncementMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  games_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage.AnnouncementMsg)
}
GameMessage_AnnouncementMsg::GameMessage_AnnouncementMsg(const GameMessage_AnnouncementMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      games_(from.games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.AnnouncementMsg)
}

void GameMessage_AnnouncementMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameMessage_AnnouncementMsg_snakes_2eproto.base);
}

GameMessage_AnnouncementMsg::~GameMessage_AnnouncementMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.AnnouncementMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage_AnnouncementMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameMessage_AnnouncementMsg::ArenaDtor(void* object) {
  GameMessage_AnnouncementMsg* _this = reinterpret_cast< GameMessage_AnnouncementMsg* >(object);
  (void)_this;
}
void GameMessage_AnnouncementMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage_AnnouncementMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage_AnnouncementMsg& GameMessage_AnnouncementMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_AnnouncementMsg_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage_AnnouncementMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.AnnouncementMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage_AnnouncementMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .snakes.GameAnnouncement games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage_AnnouncementMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.AnnouncementMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .snakes.GameAnnouncement games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.AnnouncementMsg)
  return target;
}

size_t GameMessage_AnnouncementMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.AnnouncementMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snakes.GameAnnouncement games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage_AnnouncementMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.AnnouncementMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage_AnnouncementMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage_AnnouncementMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.AnnouncementMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.AnnouncementMsg)
    MergeFrom(*source);
  }
}

void GameMessage_AnnouncementMsg::MergeFrom(const GameMessage_AnnouncementMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.AnnouncementMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void GameMessage_AnnouncementMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.AnnouncementMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_AnnouncementMsg::CopyFrom(const GameMessage_AnnouncementMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.AnnouncementMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_AnnouncementMsg::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(games_)) return false;
  return true;
}

void GameMessage_AnnouncementMsg::InternalSwap(GameMessage_AnnouncementMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  games_.InternalSwap(&other->games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage_AnnouncementMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage_DiscoverMsg::InitAsDefaultInstance() {
}
class GameMessage_DiscoverMsg::_Internal {
 public:
};

GameMessage_DiscoverMsg::GameMessage_DiscoverMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage.DiscoverMsg)
}
GameMessage_DiscoverMsg::GameMessage_DiscoverMsg(const GameMessage_DiscoverMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.DiscoverMsg)
}

void GameMessage_DiscoverMsg::SharedCtor() {
}

GameMessage_DiscoverMsg::~GameMessage_DiscoverMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.DiscoverMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage_DiscoverMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameMessage_DiscoverMsg::ArenaDtor(void* object) {
  GameMessage_DiscoverMsg* _this = reinterpret_cast< GameMessage_DiscoverMsg* >(object);
  (void)_this;
}
void GameMessage_DiscoverMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage_DiscoverMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage_DiscoverMsg& GameMessage_DiscoverMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_DiscoverMsg_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage_DiscoverMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.DiscoverMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage_DiscoverMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage_DiscoverMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.DiscoverMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.DiscoverMsg)
  return target;
}

size_t GameMessage_DiscoverMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.DiscoverMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage_DiscoverMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.DiscoverMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage_DiscoverMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage_DiscoverMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.DiscoverMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.DiscoverMsg)
    MergeFrom(*source);
  }
}

void GameMessage_DiscoverMsg::MergeFrom(const GameMessage_DiscoverMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.DiscoverMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameMessage_DiscoverMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.DiscoverMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_DiscoverMsg::CopyFrom(const GameMessage_DiscoverMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.DiscoverMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_DiscoverMsg::IsInitialized() const {
  return true;
}

void GameMessage_DiscoverMsg::InternalSwap(GameMessage_DiscoverMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage_DiscoverMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage_JoinMsg::InitAsDefaultInstance() {
}
class GameMessage_JoinMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMessage_JoinMsg>()._has_bits_);
  static void set_has_player_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_requested_role(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

GameMessage_JoinMsg::GameMessage_JoinMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage.JoinMsg)
}
GameMessage_JoinMsg::GameMessage_JoinMsg(const GameMessage_JoinMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_name()) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_name(),
      GetArena());
  }
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_name()) {
    game_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_name(),
      GetArena());
  }
  ::memcpy(&player_type_, &from.player_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&requested_role_) -
    reinterpret_cast<char*>(&player_type_)) + sizeof(requested_role_));
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.JoinMsg)
}

void GameMessage_JoinMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameMessage_JoinMsg_snakes_2eproto.base);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requested_role_) -
      reinterpret_cast<char*>(&player_type_)) + sizeof(requested_role_));
}

GameMessage_JoinMsg::~GameMessage_JoinMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.JoinMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage_JoinMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameMessage_JoinMsg::ArenaDtor(void* object) {
  GameMessage_JoinMsg* _this = reinterpret_cast< GameMessage_JoinMsg* >(object);
  (void)_this;
}
void GameMessage_JoinMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage_JoinMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage_JoinMsg& GameMessage_JoinMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_JoinMsg_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage_JoinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.JoinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&player_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requested_role_) -
        reinterpret_cast<char*>(&player_type_)) + sizeof(requested_role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage_JoinMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .snakes.PlayerType player_type = 1 [default = HUMAN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::snakes::PlayerType_IsValid(val))) {
            _internal_set_player_type(static_cast<::snakes::PlayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string player_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snakes.GameMessage.JoinMsg.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string game_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snakes.GameMessage.JoinMsg.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .snakes.NodeRole requested_role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::snakes::NodeRole_IsValid(val))) {
            _internal_set_requested_role(static_cast<::snakes::NodeRole>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage_JoinMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.JoinMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .snakes.PlayerType player_type = 1 [default = HUMAN];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_player_type(), target);
  }

  // required string player_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "snakes.GameMessage.JoinMsg.player_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_player_name(), target);
  }

  // required string game_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "snakes.GameMessage.JoinMsg.game_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_game_name(), target);
  }

  // required .snakes.NodeRole requested_role = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_requested_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.JoinMsg)
  return target;
}

size_t GameMessage_JoinMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snakes.GameMessage.JoinMsg)
  size_t total_size = 0;

  if (_internal_has_player_name()) {
    // required string player_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  if (_internal_has_game_name()) {
    // required string game_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_name());
  }

  if (_internal_has_requested_role()) {
    // required .snakes.NodeRole requested_role = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requested_role());
  }

  return total_size;
}
size_t GameMessage_JoinMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.JoinMsg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string player_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());

    // required string game_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_name());

    // required .snakes.NodeRole requested_role = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requested_role());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .snakes.PlayerType player_type = 1 [default = HUMAN];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_player_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage_JoinMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.JoinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage_JoinMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage_JoinMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.JoinMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.JoinMsg)
    MergeFrom(*source);
  }
}

void GameMessage_JoinMsg::MergeFrom(const GameMessage_JoinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.JoinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000004u) {
      player_type_ = from.player_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      requested_role_ = from.requested_role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameMessage_JoinMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.JoinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_JoinMsg::CopyFrom(const GameMessage_JoinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.JoinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_JoinMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameMessage_JoinMsg::InternalSwap(GameMessage_JoinMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_name_.Swap(&other->game_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMessage_JoinMsg, requested_role_)
      + sizeof(GameMessage_JoinMsg::requested_role_)
      - PROTOBUF_FIELD_OFFSET(GameMessage_JoinMsg, player_type_)>(
          reinterpret_cast<char*>(&player_type_),
          reinterpret_cast<char*>(&other->player_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage_JoinMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage_ErrorMsg::InitAsDefaultInstance() {
}
class GameMessage_ErrorMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMessage_ErrorMsg>()._has_bits_);
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameMessage_ErrorMsg::GameMessage_ErrorMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage.ErrorMsg)
}
GameMessage_ErrorMsg::GameMessage_ErrorMsg(const GameMessage_ErrorMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_message()) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.ErrorMsg)
}

void GameMessage_ErrorMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameMessage_ErrorMsg_snakes_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameMessage_ErrorMsg::~GameMessage_ErrorMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.ErrorMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage_ErrorMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameMessage_ErrorMsg::ArenaDtor(void* object) {
  GameMessage_ErrorMsg* _this = reinterpret_cast< GameMessage_ErrorMsg* >(object);
  (void)_this;
}
void GameMessage_ErrorMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage_ErrorMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage_ErrorMsg& GameMessage_ErrorMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_ErrorMsg_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage_ErrorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.ErrorMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage_ErrorMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string error_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "snakes.GameMessage.ErrorMsg.error_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage_ErrorMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.ErrorMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string error_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "snakes.GameMessage.ErrorMsg.error_message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.ErrorMsg)
  return target;
}

size_t GameMessage_ErrorMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.ErrorMsg)
  size_t total_size = 0;

  // required string error_message = 1;
  if (_internal_has_error_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage_ErrorMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.ErrorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage_ErrorMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage_ErrorMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.ErrorMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.ErrorMsg)
    MergeFrom(*source);
  }
}

void GameMessage_ErrorMsg::MergeFrom(const GameMessage_ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.ErrorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error_message()) {
    _internal_set_error_message(from._internal_error_message());
  }
}

void GameMessage_ErrorMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_ErrorMsg::CopyFrom(const GameMessage_ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_ErrorMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameMessage_ErrorMsg::InternalSwap(GameMessage_ErrorMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage_ErrorMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage_RoleChangeMsg::InitAsDefaultInstance() {
}
class GameMessage_RoleChangeMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMessage_RoleChangeMsg>()._has_bits_);
  static void set_has_sender_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GameMessage_RoleChangeMsg::GameMessage_RoleChangeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage.RoleChangeMsg)
}
GameMessage_RoleChangeMsg::GameMessage_RoleChangeMsg(const GameMessage_RoleChangeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sender_role_, &from.sender_role_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_role_) -
    reinterpret_cast<char*>(&sender_role_)) + sizeof(receiver_role_));
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage.RoleChangeMsg)
}

void GameMessage_RoleChangeMsg::SharedCtor() {
  ::memset(&sender_role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_role_) -
      reinterpret_cast<char*>(&sender_role_)) + sizeof(receiver_role_));
}

GameMessage_RoleChangeMsg::~GameMessage_RoleChangeMsg() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage.RoleChangeMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage_RoleChangeMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameMessage_RoleChangeMsg::ArenaDtor(void* object) {
  GameMessage_RoleChangeMsg* _this = reinterpret_cast< GameMessage_RoleChangeMsg* >(object);
  (void)_this;
}
void GameMessage_RoleChangeMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage_RoleChangeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage_RoleChangeMsg& GameMessage_RoleChangeMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_RoleChangeMsg_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage_RoleChangeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage.RoleChangeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sender_role_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receiver_role_) -
        reinterpret_cast<char*>(&sender_role_)) + sizeof(receiver_role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage_RoleChangeMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .snakes.NodeRole sender_role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::snakes::NodeRole_IsValid(val))) {
            _internal_set_sender_role(static_cast<::snakes::NodeRole>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .snakes.NodeRole receiver_role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::snakes::NodeRole_IsValid(val))) {
            _internal_set_receiver_role(static_cast<::snakes::NodeRole>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage_RoleChangeMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage.RoleChangeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .snakes.NodeRole sender_role = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sender_role(), target);
  }

  // optional .snakes.NodeRole receiver_role = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_receiver_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage.RoleChangeMsg)
  return target;
}

size_t GameMessage_RoleChangeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage.RoleChangeMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .snakes.NodeRole sender_role = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sender_role());
    }

    // optional .snakes.NodeRole receiver_role = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_receiver_role());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage_RoleChangeMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage.RoleChangeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage_RoleChangeMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage_RoleChangeMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage.RoleChangeMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage.RoleChangeMsg)
    MergeFrom(*source);
  }
}

void GameMessage_RoleChangeMsg::MergeFrom(const GameMessage_RoleChangeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage.RoleChangeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sender_role_ = from.sender_role_;
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_role_ = from.receiver_role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameMessage_RoleChangeMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage.RoleChangeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage_RoleChangeMsg::CopyFrom(const GameMessage_RoleChangeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage.RoleChangeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage_RoleChangeMsg::IsInitialized() const {
  return true;
}

void GameMessage_RoleChangeMsg::InternalSwap(GameMessage_RoleChangeMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMessage_RoleChangeMsg, receiver_role_)
      + sizeof(GameMessage_RoleChangeMsg::receiver_role_)
      - PROTOBUF_FIELD_OFFSET(GameMessage_RoleChangeMsg, sender_role_)>(
          reinterpret_cast<char*>(&sender_role_),
          reinterpret_cast<char*>(&other->sender_role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage_RoleChangeMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameMessage::InitAsDefaultInstance() {
  ::snakes::_GameMessage_default_instance_.ping_ = const_cast< ::snakes::GameMessage_PingMsg*>(
      ::snakes::GameMessage_PingMsg::internal_default_instance());
  ::snakes::_GameMessage_default_instance_.steer_ = const_cast< ::snakes::GameMessage_SteerMsg*>(
      ::snakes::GameMessage_SteerMsg::internal_default_instance());
  ::snakes::_GameMessage_default_instance_.ack_ = const_cast< ::snakes::GameMessage_AckMsg*>(
      ::snakes::GameMessage_AckMsg::internal_default_instance());
  ::snakes::_GameMessage_default_instance_.state_ = const_cast< ::snakes::GameMessage_StateMsg*>(
      ::snakes::GameMessage_StateMsg::internal_default_instance());
  ::snakes::_GameMessage_default_instance_.announcement_ = const_cast< ::snakes::GameMessage_AnnouncementMsg*>(
      ::snakes::GameMessage_AnnouncementMsg::internal_default_instance());
  ::snakes::_GameMessage_default_instance_.join_ = const_cast< ::snakes::GameMessage_JoinMsg*>(
      ::snakes::GameMessage_JoinMsg::internal_default_instance());
  ::snakes::_GameMessage_default_instance_.error_ = const_cast< ::snakes::GameMessage_ErrorMsg*>(
      ::snakes::GameMessage_ErrorMsg::internal_default_instance());
  ::snakes::_GameMessage_default_instance_.role_change_ = const_cast< ::snakes::GameMessage_RoleChangeMsg*>(
      ::snakes::GameMessage_RoleChangeMsg::internal_default_instance());
  ::snakes::_GameMessage_default_instance_.discover_ = const_cast< ::snakes::GameMessage_DiscoverMsg*>(
      ::snakes::GameMessage_DiscoverMsg::internal_default_instance());
}
class GameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMessage>()._has_bits_);
  static void set_has_msg_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_receiver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::snakes::GameMessage_PingMsg& ping(const GameMessage* msg);
  static const ::snakes::GameMessage_SteerMsg& steer(const GameMessage* msg);
  static const ::snakes::GameMessage_AckMsg& ack(const GameMessage* msg);
  static const ::snakes::GameMessage_StateMsg& state(const GameMessage* msg);
  static const ::snakes::GameMessage_AnnouncementMsg& announcement(const GameMessage* msg);
  static const ::snakes::GameMessage_JoinMsg& join(const GameMessage* msg);
  static const ::snakes::GameMessage_ErrorMsg& error(const GameMessage* msg);
  static const ::snakes::GameMessage_RoleChangeMsg& role_change(const GameMessage* msg);
  static const ::snakes::GameMessage_DiscoverMsg& discover(const GameMessage* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::snakes::GameMessage_PingMsg&
GameMessage::_Internal::ping(const GameMessage* msg) {
  return *msg->Type_.ping_;
}
const ::snakes::GameMessage_SteerMsg&
GameMessage::_Internal::steer(const GameMessage* msg) {
  return *msg->Type_.steer_;
}
const ::snakes::GameMessage_AckMsg&
GameMessage::_Internal::ack(const GameMessage* msg) {
  return *msg->Type_.ack_;
}
const ::snakes::GameMessage_StateMsg&
GameMessage::_Internal::state(const GameMessage* msg) {
  return *msg->Type_.state_;
}
const ::snakes::GameMessage_AnnouncementMsg&
GameMessage::_Internal::announcement(const GameMessage* msg) {
  return *msg->Type_.announcement_;
}
const ::snakes::GameMessage_JoinMsg&
GameMessage::_Internal::join(const GameMessage* msg) {
  return *msg->Type_.join_;
}
const ::snakes::GameMessage_ErrorMsg&
GameMessage::_Internal::error(const GameMessage* msg) {
  return *msg->Type_.error_;
}
const ::snakes::GameMessage_RoleChangeMsg&
GameMessage::_Internal::role_change(const GameMessage* msg) {
  return *msg->Type_.role_change_;
}
const ::snakes::GameMessage_DiscoverMsg&
GameMessage::_Internal::discover(const GameMessage* msg) {
  return *msg->Type_.discover_;
}
void GameMessage::set_allocated_ping(::snakes::GameMessage_PingMsg* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    Type_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.ping)
}
void GameMessage::set_allocated_steer(::snakes::GameMessage_SteerMsg* steer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (steer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(steer);
    if (message_arena != submessage_arena) {
      steer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer, submessage_arena);
    }
    set_has_steer();
    Type_.steer_ = steer;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.steer)
}
void GameMessage::set_allocated_ack(::snakes::GameMessage_AckMsg* ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ack);
    if (message_arena != submessage_arena) {
      ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack, submessage_arena);
    }
    set_has_ack();
    Type_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.ack)
}
void GameMessage::set_allocated_state(::snakes::GameMessage_StateMsg* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
    Type_.state_ = state;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.state)
}
void GameMessage::set_allocated_announcement(::snakes::GameMessage_AnnouncementMsg* announcement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (announcement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(announcement);
    if (message_arena != submessage_arena) {
      announcement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, announcement, submessage_arena);
    }
    set_has_announcement();
    Type_.announcement_ = announcement;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.announcement)
}
void GameMessage::set_allocated_join(::snakes::GameMessage_JoinMsg* join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(join);
    if (message_arena != submessage_arena) {
      join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join, submessage_arena);
    }
    set_has_join();
    Type_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.join)
}
void GameMessage::set_allocated_error(::snakes::GameMessage_ErrorMsg* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    Type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.error)
}
void GameMessage::set_allocated_role_change(::snakes::GameMessage_RoleChangeMsg* role_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (role_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role_change);
    if (message_arena != submessage_arena) {
      role_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_change, submessage_arena);
    }
    set_has_role_change();
    Type_.role_change_ = role_change;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.role_change)
}
void GameMessage::set_allocated_discover(::snakes::GameMessage_DiscoverMsg* discover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_Type();
  if (discover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(discover);
    if (message_arena != submessage_arena) {
      discover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discover, submessage_arena);
    }
    set_has_discover();
    Type_.discover_ = discover;
  }
  // @@protoc_insertion_point(field_set_allocated:snakes.GameMessage.discover)
}
GameMessage::GameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:snakes.GameMessage)
}
GameMessage::GameMessage(const GameMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msg_seq_, &from.msg_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&receiver_id_) -
    reinterpret_cast<char*>(&msg_seq_)) + sizeof(receiver_id_));
  clear_has_Type();
  switch (from.Type_case()) {
    case kPing: {
      _internal_mutable_ping()->::snakes::GameMessage_PingMsg::MergeFrom(from._internal_ping());
      break;
    }
    case kSteer: {
      _internal_mutable_steer()->::snakes::GameMessage_SteerMsg::MergeFrom(from._internal_steer());
      break;
    }
    case kAck: {
      _internal_mutable_ack()->::snakes::GameMessage_AckMsg::MergeFrom(from._internal_ack());
      break;
    }
    case kState: {
      _internal_mutable_state()->::snakes::GameMessage_StateMsg::MergeFrom(from._internal_state());
      break;
    }
    case kAnnouncement: {
      _internal_mutable_announcement()->::snakes::GameMessage_AnnouncementMsg::MergeFrom(from._internal_announcement());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::snakes::GameMessage_JoinMsg::MergeFrom(from._internal_join());
      break;
    }
    case kError: {
      _internal_mutable_error()->::snakes::GameMessage_ErrorMsg::MergeFrom(from._internal_error());
      break;
    }
    case kRoleChange: {
      _internal_mutable_role_change()->::snakes::GameMessage_RoleChangeMsg::MergeFrom(from._internal_role_change());
      break;
    }
    case kDiscover: {
      _internal_mutable_discover()->::snakes::GameMessage_DiscoverMsg::MergeFrom(from._internal_discover());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snakes.GameMessage)
}

void GameMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameMessage_snakes_2eproto.base);
  ::memset(&msg_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&msg_seq_)) + sizeof(receiver_id_));
  clear_has_Type();
}

GameMessage::~GameMessage() {
  // @@protoc_insertion_point(destructor:snakes.GameMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_Type()) {
    clear_Type();
  }
}

void GameMessage::ArenaDtor(void* object) {
  GameMessage* _this = reinterpret_cast< GameMessage* >(object);
  (void)_this;
}
void GameMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameMessage& GameMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameMessage_snakes_2eproto.base);
  return *internal_default_instance();
}


void GameMessage::clear_Type() {
// @@protoc_insertion_point(one_of_clear_start:snakes.GameMessage)
  switch (Type_case()) {
    case kPing: {
      if (GetArena() == nullptr) {
        delete Type_.ping_;
      }
      break;
    }
    case kSteer: {
      if (GetArena() == nullptr) {
        delete Type_.steer_;
      }
      break;
    }
    case kAck: {
      if (GetArena() == nullptr) {
        delete Type_.ack_;
      }
      break;
    }
    case kState: {
      if (GetArena() == nullptr) {
        delete Type_.state_;
      }
      break;
    }
    case kAnnouncement: {
      if (GetArena() == nullptr) {
        delete Type_.announcement_;
      }
      break;
    }
    case kJoin: {
      if (GetArena() == nullptr) {
        delete Type_.join_;
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete Type_.error_;
      }
      break;
    }
    case kRoleChange: {
      if (GetArena() == nullptr) {
        delete Type_.role_change_;
      }
      break;
    }
    case kDiscover: {
      if (GetArena() == nullptr) {
        delete Type_.discover_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void GameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:snakes.GameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&msg_seq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&receiver_id_) -
        reinterpret_cast<char*>(&msg_seq_)) + sizeof(receiver_id_));
  }
  clear_Type();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 msg_seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_seq(&has_bits);
          msg_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snakes.GameMessage.PingMsg ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snakes.GameMessage.SteerMsg steer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snakes.GameMessage.AckMsg ack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snakes.GameMessage.StateMsg state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snakes.GameMessage.AnnouncementMsg announcement = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_announcement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snakes.GameMessage.JoinMsg join = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snakes.GameMessage.ErrorMsg error = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snakes.GameMessage.RoleChangeMsg role_change = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sender_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 receiver_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_receiver_id(&has_bits);
          receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snakes.GameMessage.DiscoverMsg discover = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_discover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:snakes.GameMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 msg_seq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_msg_seq(), target);
  }

  switch (Type_case()) {
    case kPing: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::ping(this), target, stream);
      break;
    }
    case kSteer: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::steer(this), target, stream);
      break;
    }
    case kAck: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::ack(this), target, stream);
      break;
    }
    case kState: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::state(this), target, stream);
      break;
    }
    case kAnnouncement: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::announcement(this), target, stream);
      break;
    }
    case kJoin: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::join(this), target, stream);
      break;
    }
    case kError: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::error(this), target, stream);
      break;
    }
    case kRoleChange: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::role_change(this), target, stream);
      break;
    }
    default: ;
  }
  // optional int32 sender_id = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_sender_id(), target);
  }

  // optional int32 receiver_id = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_receiver_id(), target);
  }

  // .snakes.GameMessage.DiscoverMsg discover = 12;
  if (_internal_has_discover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::discover(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snakes.GameMessage)
  return target;
}

size_t GameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snakes.GameMessage)
  size_t total_size = 0;

  // required int64 msg_seq = 1;
  if (_internal_has_msg_seq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_msg_seq());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 sender_id = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sender_id());
    }

    // optional int32 receiver_id = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_receiver_id());
    }

  }
  switch (Type_case()) {
    // .snakes.GameMessage.PingMsg ping = 2;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.ping_);
      break;
    }
    // .snakes.GameMessage.SteerMsg steer = 3;
    case kSteer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.steer_);
      break;
    }
    // .snakes.GameMessage.AckMsg ack = 4;
    case kAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.ack_);
      break;
    }
    // .snakes.GameMessage.StateMsg state = 5;
    case kState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.state_);
      break;
    }
    // .snakes.GameMessage.AnnouncementMsg announcement = 6;
    case kAnnouncement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.announcement_);
      break;
    }
    // .snakes.GameMessage.JoinMsg join = 7;
    case kJoin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.join_);
      break;
    }
    // .snakes.GameMessage.ErrorMsg error = 8;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.error_);
      break;
    }
    // .snakes.GameMessage.RoleChangeMsg role_change = 9;
    case kRoleChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.role_change_);
      break;
    }
    // .snakes.GameMessage.DiscoverMsg discover = 12;
    case kDiscover: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Type_.discover_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snakes.GameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snakes.GameMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snakes.GameMessage)
    MergeFrom(*source);
  }
}

void GameMessage::MergeFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snakes.GameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      msg_seq_ = from.msg_seq_;
    }
    if (cached_has_bits & 0x00000002u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      receiver_id_ = from.receiver_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.Type_case()) {
    case kPing: {
      _internal_mutable_ping()->::snakes::GameMessage_PingMsg::MergeFrom(from._internal_ping());
      break;
    }
    case kSteer: {
      _internal_mutable_steer()->::snakes::GameMessage_SteerMsg::MergeFrom(from._internal_steer());
      break;
    }
    case kAck: {
      _internal_mutable_ack()->::snakes::GameMessage_AckMsg::MergeFrom(from._internal_ack());
      break;
    }
    case kState: {
      _internal_mutable_state()->::snakes::GameMessage_StateMsg::MergeFrom(from._internal_state());
      break;
    }
    case kAnnouncement: {
      _internal_mutable_announcement()->::snakes::GameMessage_AnnouncementMsg::MergeFrom(from._internal_announcement());
      break;
    }
    case kJoin: {
      _internal_mutable_join()->::snakes::GameMessage_JoinMsg::MergeFrom(from._internal_join());
      break;
    }
    case kError: {
      _internal_mutable_error()->::snakes::GameMessage_ErrorMsg::MergeFrom(from._internal_error());
      break;
    }
    case kRoleChange: {
      _internal_mutable_role_change()->::snakes::GameMessage_RoleChangeMsg::MergeFrom(from._internal_role_change());
      break;
    }
    case kDiscover: {
      _internal_mutable_discover()->::snakes::GameMessage_DiscoverMsg::MergeFrom(from._internal_discover());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void GameMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snakes.GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage::CopyFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snakes.GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  switch (Type_case()) {
    case kPing: {
      break;
    }
    case kSteer: {
      if (has_steer()) {
        if (!this->steer().IsInitialized()) return false;
      }
      break;
    }
    case kAck: {
      break;
    }
    case kState: {
      if (has_state()) {
        if (!this->state().IsInitialized()) return false;
      }
      break;
    }
    case kAnnouncement: {
      if (has_announcement()) {
        if (!this->announcement().IsInitialized()) return false;
      }
      break;
    }
    case kJoin: {
      if (has_join()) {
        if (!this->join().IsInitialized()) return false;
      }
      break;
    }
    case kError: {
      if (has_error()) {
        if (!this->error().IsInitialized()) return false;
      }
      break;
    }
    case kRoleChange: {
      break;
    }
    case kDiscover: {
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void GameMessage::InternalSwap(GameMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMessage, receiver_id_)
      + sizeof(GameMessage::receiver_id_)
      - PROTOBUF_FIELD_OFFSET(GameMessage, msg_seq_)>(
          reinterpret_cast<char*>(&msg_seq_),
          reinterpret_cast<char*>(&other->msg_seq_));
  swap(Type_, other->Type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace snakes
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::snakes::GamePlayer* Arena::CreateMaybeMessage< ::snakes::GamePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GamePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameConfig* Arena::CreateMaybeMessage< ::snakes::GameConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GamePlayers* Arena::CreateMaybeMessage< ::snakes::GamePlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GamePlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameState_Coord* Arena::CreateMaybeMessage< ::snakes::GameState_Coord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameState_Coord >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameState_Snake* Arena::CreateMaybeMessage< ::snakes::GameState_Snake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameState_Snake >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameState* Arena::CreateMaybeMessage< ::snakes::GameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameState >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameAnnouncement* Arena::CreateMaybeMessage< ::snakes::GameAnnouncement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameAnnouncement >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage_PingMsg* Arena::CreateMaybeMessage< ::snakes::GameMessage_PingMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage_PingMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage_SteerMsg* Arena::CreateMaybeMessage< ::snakes::GameMessage_SteerMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage_SteerMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage_AckMsg* Arena::CreateMaybeMessage< ::snakes::GameMessage_AckMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage_AckMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage_StateMsg* Arena::CreateMaybeMessage< ::snakes::GameMessage_StateMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage_StateMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage_AnnouncementMsg* Arena::CreateMaybeMessage< ::snakes::GameMessage_AnnouncementMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage_AnnouncementMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage_DiscoverMsg* Arena::CreateMaybeMessage< ::snakes::GameMessage_DiscoverMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage_DiscoverMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage_JoinMsg* Arena::CreateMaybeMessage< ::snakes::GameMessage_JoinMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage_JoinMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage_ErrorMsg* Arena::CreateMaybeMessage< ::snakes::GameMessage_ErrorMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage_ErrorMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage_RoleChangeMsg* Arena::CreateMaybeMessage< ::snakes::GameMessage_RoleChangeMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage_RoleChangeMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::snakes::GameMessage* Arena::CreateMaybeMessage< ::snakes::GameMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::snakes::GameMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
